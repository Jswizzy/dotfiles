" Lucas's .vimrc

" VUNDLE PLUGINS {{{

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Utilities
" Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Raimondi/delimitMate'
Plugin 'SirVer/ultisnips'
Plugin 'VundleVim/Vundle.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'airblade/vim-gitgutter'
Plugin 'christoomey/vim-sort-motion'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'honza/vim-snippets'
Plugin 'junegunn/fzf.vim'
Plugin 'rstacruz/sparkup'
Plugin 'sickill/vim-pasta'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-vinegar'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'w0rp/ale'

" Language-specific plugin
Plugin 'elzr/vim-json'
Plugin 'leafgarland/typescript-vim'
Plugin 'mxw/vim-jsx'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'othree/yajs.vim'
Plugin 'posva/vim-vue'
call vundle#end()

" }}}

" PLUGINS CONFIG {{{

" Vim Indent Guides
" let g:indent_guides_auto_colors=0
" let g:indent_guides_enable_on_vim_startup=1
" set ts=2
" set sw=2 et

" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=233
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=232

" Setup FZF
set rtp+=/usr/local/opt/fzf

" indentLine
let g:indentLine_enabled = 1
let g:indentLine_char = '⎸'
let g:indentLine_color_term = 236

" Vim Airline
" Top picks: angr, dark, dark_minimal, durant, minimalist, onedark, ravenpower, term
let g:airline_theme='dark'
let g:airline_powerline_fonts=1
let g:airline_skip_empty_sections=1
let g:airline_extensions = ['branch', 'hunks', 'ale']
let g:airline#extensions#ale#enabled = 1

" Editorconfig
let g:EditorConfig_exec_path = '~/.editorconfig'

" Ale
let g:ale_fixers = {
\  'javascript': [
\    'prettier',
\    'eslint',
\  ],
\  'json': [
\    'prettier'
\  ],
\  'scss': [
\    'prettier'
\  ],
\  'liquid': [
\    'prettier'
\  ],
\  'css': [
\    'prettier'
\  ],
\}
" Do not lint or fix minified files.
let g:ale_pattern_options = {
\ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
\ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
\}
let g:ale_sign_error = '✖' " Less aggressive than the default '>>'
let g:ale_sign_warning = '◆'
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1 " use local .prettierrc file
let g:ale_echo_msg_error_str = '✖'
let g:ale_echo_msg_warning_str = '◆'
let g:ale_echo_msg_format = '[%linter%] %severity% %s'

" JSX
let g:jsx_ext_required = 0

autocmd VimEnter,Colorscheme * :hi ALEError ctermfg=167 ctermbg=236
autocmd VimEnter,Colorscheme * :hi ALEErrorSign ctermfg=167 ctermbg=233
autocmd VimEnter,Colorscheme * :hi ALEWarning ctermfg=184 ctermbg=236
autocmd VimEnter,Colorscheme * :hi ALEWarningSign ctermfg=184 ctermbg=233

" GitGutter
let g:gitgutter_max_signs = 200
autocmd VimEnter,Colorscheme * :hi GitGutterAdd ctermbg=233 ctermfg=41
autocmd VimEnter,Colorscheme * :hi GitGutterChange ctermbg=233 ctermfg=184
autocmd VimEnter,Colorscheme * :hi GitGutterDelete ctermbg=233 ctermfg=167
autocmd VimEnter,Colorscheme * :hi GitGutterChangeDelete ctermbg=233 ctermfg=167

" }}}

" DEFAULT SETTINGS {{{

filetype plugin on " Detect filetype
set nocompatible " Use vim features
set encoding=utf-8 " Set encoding
set history=5000 " Increase command line history
let mapleader="," " Set leader key to ,

if system('uname -s') == "Darwin\n"
  "OSX
  set clipboard=unnamed " Use OS clipboard by default
else
  "Linux
  set clipboard=unnamedplus " Use UNIX clipboard by default
endif

set autoindent " Copy indent to the new line
set wildmenu " Enhance command-line completion
set path+=** " Search down into subfolders
set tabstop=2 " Make tabs as wide as two spaces
set hlsearch " Highlight searches
set ignorecase " Ignore case of searches
set incsearch " Search as characters are entered
set showmatch " Show matching brackets when text indicator is over them
set backupcopy=yes " Prevent VIM from renaming files
set scrolloff=5 " Offset top and bottom lines

" Searching for slash as normal text
command! -nargs=1 Ss let @/ = <q-args>|set hlsearch

" No sound errors
set noerrorbells
set novisualbell
set ai " Auto indent
set si " Smart indent

" Use relative numbers
if exists("&relativenumber")
	set relativenumber
	au BufReadPost * set relativenumber
endif

" Pulls completions from current file, other buffers (closed or still open),
" and from the current tags file
set complete=.,b,u,]

" }}}

" KEY REMAPING {{{

" Edit vimrc file
nmap <leader>ev :e $MYVIMRC<CR>
" switch between current and last buffer
nmap <leader>. <c-^>
" Turn off search highlight
nnoremap <leader><space> :nohlsearch<CR><CR>:<backspace>
" kill all open buffers
nnoremap <leader>bd :bufdo bdelete<CR>
" Start search command
nnoremap <Leader>s :Search<CR>
" Search and replace binding
nnoremap <Leader>sr :%s/\<<C-r><C-w>\>/
" Edit file, starting in same directory as current file.
nnoremap <Leader>e :edit <C-R>=expand('%:p:h') . '/'<CR>
" Remap backtick marker
nnoremap " `
" Space opens/closes folds
nnoremap <space> za
" Replace ESC key
inoremap jk <ESC>
" disable Ex mode
noremap Q <NOP>
" next quicklist result
nnoremap ]q :cnext<CR>
" previuos quicklist result
nnoremap [q :cprev<CR>
" Avoid unintentional switches to Ex mode.
nmap Q q
" Multi-mode mappings (Normal, Visual, Operating-pending modes).
noremap Y y$
" Project finder
nmap <Leader>a :Ag<Space>
" Buffer finder
nmap <Leader>b :Buffers<CR>
" Files finder
nmap <Leader>f :Files<CR>

" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : '') . 'j'

" Repurpose cursor keys for quicklist navigation.
nnoremap <silent> <Up> :cprevious<CR>
nnoremap <silent> <Down> :cnext<CR>
nnoremap <silent> <Left> :cpfile<CR>
nnoremap <silent> <Right> :cnfile<CR>

" Quick panel navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : '') . 'j'

" Line navigation ignores line wrap
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk


" }}}

" FOLDING {{{

set foldenable " Enable folding
set foldlevelstart=10 " Open most folds by default
set foldnestmax=10 " 10 nested fold max
set foldmethod=indent " Fold based on indent level

" }}}

" SILVER SEARCHER {{{

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
  set grepformat^=%f:%l:%c:%m   " file:line:column:message
endif

" }}}

" FUNCTIONS {{{

function! MySearch()
  let grep_term = input("⦿ Search for: ")
  if !empty(grep_term)
    execute 'silent grep' grep_term | copen
  else
    echo "Empty search term"
  endif
  redraw!
endfunction

command! Search call MySearch()

function! RangeChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    if has("gui_running")
        exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp)
    else
        exec 'silent !ranger --choosefiles=' . shellescape(temp)
    endif
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar RangerChooser call RangeChooser()
nnoremap <leader>r :<C-U>RangerChooser<CR>

" }}}

" TAB {{{

set expandtab " insert spaces for tabbed content
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set softtabstop=2 " edit as if the tabs are 2 characters wide
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

" Defines indentation for HTML files
autocmd FileType html setlocal expandtab shiftwidth=2 softtabstop=2

" }}}

" VISUAL {{{

syntax on " Enable syntax highlight

" Set theme
set t_Co=256
colorscheme Benokai
highlight Normal term=bold cterm=NONE ctermfg=white ctermbg=NONE

set laststatus=2 " Show status line
set showmode " Show what mode you're currently in
set showcmd " Show what commands you're typing
set modelines=1 " Enable modelines
set number " Show line number

" display indentation guides
set list
set showbreak=↪\
set listchars=tab:┊\ ,eol:¬,nbsp:␣,trail:·,extends:»,precedes:«,nbsp:×

"Invisible character colors
hi NonText ctermfg=238
hi SpecialKey ctermfg=238

" Hightlight line color
hi CursorLine cterm=NONE ctermbg=234

" Hightlight search result
hi Search ctermbg=NONE ctermfg=red

hi TabLineFill ctermfg=231 ctermbg=16
hi TabLine ctermfg=250 ctermbg=16
hi TabLineSel ctermfg=231 ctermbg=240

" Custom line number theme
hi LineNr term=bold cterm=NONE ctermfg=242 ctermbg=233

set title " Show file title in terminal tab
set cursorline " Highlight current line
set ruler " Show cursor position

" Set manualy foldmethod to marker specifically for .vimrc
" vim:foldmethod=marker
